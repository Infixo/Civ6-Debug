<?xml version="1.0"?>
<PanelData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>Player</Name>
  <App>Civ5</App>
  <EnterAction />
  <ExitAction />
  <CompatibleStates>
    <string>GameCore_Tuner</string>
  </CompatibleStates>
  <LoadStates />
  <Actions>
    <ActionData>
      <Name>Grant All Techs</Name>
      <Action>local player = Players[g_TunerSelectedPlayer];
local playerTechs = player:GetTechs();
local ID = 0;		

for tech in GameInfo.Technologies() do
	playerTechs:SetResearchProgress(tech.Index, playerTechs:GetResearchCost(tech.Index));
end</Action>
      <Location>
        <X>580</X>
        <Y>189</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Remove All Techs</Name>
      <Action>local player = Players[g_TunerSelectedPlayer];
local playerTechs = player:GetTechs();
local ID = 0;		

for tech in GameInfo.Technologies() do
	playerTechs:SetTech(ID, true);
	ID = ID + 1;
end
</Action>
      <Location>
        <X>580</X>
        <Y>216</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Grant All Techs (All Players)</Name>
      <Action>i = 0;
for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
	if Players[i]:IsEverAlive()  then

		local pPlayer = Players[i];
		local pPlayerTechs = pPlayer:GetTechs();
		
		local iTechLoop = 0;
		local pTechInfo = GameInfo.Technologies[iTechLoop];
		
		while( pTechInfo~= nil ) do
		   pPlayerTechs:SetTech(iTechLoop, true);
		   iTechLoop = iTechLoop + 1;
		   pTechInfo= GameInfo.Technologies[iTechLoop];
		end
		   
	end
	
	i = i + 1;
end
</Action>
      <Location>
        <X>580</X>
        <Y>282</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Remove All Techs (All Players)</Name>
      <Action>i = 0;
for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
	if Players[i]:IsEverAlive()  then

		local pPlayer = Players[i];
		local pPlayerTechs = pPlayer:GetTechs();
		
		local iTechLoop = 0;
		local pTechInfo = GameInfo.Technologies[iTechLoop];
		
		while( pTechInfo~= nil ) do
		   pPlayerTechs:SetTech(iTechLoop, false);
		   iTechLoop = iTechLoop + 1;
		   pTechInfo= GameInfo.Technologies[iTechLoop];
		end
		   
	end
	
	i = i + 1;
end
</Action>
      <Location>
        <X>580</X>
        <Y>310</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>1000 Gold</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetTreasury():ChangeGoldBalance(1000);</Action>
      <Location>
        <X>580</X>
        <Y>64</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>1000 Culture</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetCulture():ChangeCurrentCulturalProgress(1000);</Action>
      <Location>
        <X>650</X>
        <Y>64</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Grant Least Costly Tech</Name>
      <Action>-- Grant the next tech that we can research that has the least cost
local player = Players[g_TunerSelectedPlayer];
local playerTechs = player:GetTechs();
local quickestResearchTurnsLeft = nil;
local quickestToResearchTechID = -1;
local ID = 0;		

for tech in GameInfo.Technologies() do
	if(playerTechs:CanResearch(ID) and not playerTechs:HasTech(ID)) then
		local researchTurnsLeft = playerTechs:GetTurnsToResearch(ID);
		print(researchTurnsLeft);
		if(quickestResearchTurnsLeft == nil or researchTurnsLeft &lt; quickestResearchTurnsLeft) then
			quickestToResearchTechID = ID;
			quickestResearchTurnsLeft = researchTurnsLeft;
		end
	end
	ID = ID + 1;
end

if(quickestToResearchTechID ~= -1) then
	-- Add the tech through the research progress interface, rather than just
	-- setting the tech so all the events get sent.
	playerTechs:SetResearchProgress(quickestToResearchTechID, playerTechs:GetResearchCost(quickestToResearchTechID));
end</Action>
      <Location>
        <X>580</X>
        <Y>243</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>5 Faith</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetReligion():ChangeFaithBalance(5);
</Action>
      <Location>
        <X>730</X>
        <Y>64</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Complete Current Research</Name>
      <Action>local playerTechs = Players[g_TunerSelectedPlayer]:GetTechs();

if (playerTechs:GetResearchingTech() ~= -1) then
	playerTechs:ChangeCurrentResearchProgress(playerTechs:GetResearchCost(playerTechs:GetResearchingTech()) - playerTechs:GetResearchProgress());
end</Action>
      <Location>
        <X>580</X>
        <Y>163</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Declare War</Name>
      <Action>local pPlayer = Players[g_TunerSelectedPlayer];
if (pPlayer ~= nil) then
	local otherPlayerID = 1;
	if (myTeamID ~= otherPlayerID) then
		pPlayer:GetDiplomacy():SetAtWarWith(otherTeamID, true);
		Players[otherPlayerID]:GetDiplomacy():SetAtWarWith(pPlayer:GetID(), true);
	end
end</Action>
      <Location>
        <X>580</X>
        <Y>339</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>1000 Faith</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetReligion():ChangeFaithBalance(1000);
</Action>
      <Location>
        <X>780</X>
        <Y>64</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Grant All Cultures</Name>
      <Action>if (g_TunerSelectedPlayer ~= -1) then
	local player = Players[g_TunerSelectedPlayer];
	local playerCulture = player:GetCulture();
	if playerCulture ~= nil then
		local ID = 0;		
		for tech in GameInfo.Civics() do
			playerCulture:SetCivic(ID, true);
			ID = ID + 1;
		end
	end
end</Action>
      <Location>
        <X>580</X>
        <Y>482</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great General Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(0,50);</Action>
      <Location>
        <X>920</X>
        <Y>269</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Admiral Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(1,50);</Action>
      <Location>
        <X>920</X>
        <Y>299</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Engineer Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(2,50);</Action>
      <Location>
        <X>920</X>
        <Y>328</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Merchant Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(3,50);</Action>
      <Location>
        <X>920</X>
        <Y>357</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Prophet Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(4,50);</Action>
      <Location>
        <X>920</X>
        <Y>387</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Scientist Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(5,50);</Action>
      <Location>
        <X>920</X>
        <Y>416</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Writer Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(6,50);</Action>
      <Location>
        <X>920</X>
        <Y>444</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Artist Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(7,50);</Action>
      <Location>
        <X>920</X>
        <Y>472</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+50 Great Musician Points</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetGreatPeoplePoints():ChangePointsTotal(8,50);</Action>
      <Location>
        <X>920</X>
        <Y>500</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Grant Envoy</Name>
      <Action>Players[g_TunerSelectedPlayer]:GetInfluence():ChangeTokensToGive(1);</Action>
      <Location>
        <X>790</X>
        <Y>341</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+5 Era Score</Name>
      <Action>if (Game.ChangePlayerEraScore ~= nil) then
	Game.ChangePlayerEraScore(g_TunerSelectedPlayer, 5);
end</Action>
      <Location>
        <X>790</X>
        <Y>163</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>+1 Era Score</Name>
      <Action>if (Game.ChangePlayerEraScore ~= nil) then
	Game.ChangePlayerEraScore(g_TunerSelectedPlayer, 1);
end</Action>
      <Location>
        <X>790</X>
        <Y>190</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>-1 Era Score</Name>
      <Action>if (Game.ChangePlayerEraScore ~= nil) then
	Game.ChangePlayerEraScore(g_TunerSelectedPlayer, -1);
end</Action>
      <Location>
        <X>790</X>
        <Y>216</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>-5 Era Score</Name>
      <Action>if (Game.ChangePlayerEraScore ~= nil) then
	Game.ChangePlayerEraScore(g_TunerSelectedPlayer, -5);
end</Action>
      <Location>
        <X>790</X>
        <Y>242</Y>
      </Location>
    </ActionData>
  </Actions>
  <StringControls />
  <IntegerControls>
    <IntegerControlData>
      <Name>Current Research ID</Name>
      <GetFunction>function()
  if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetTechs() == nil then return "NO_TECH"; end
	local techType = Players[g_TunerSelectedPlayer]:GetTechs():GetResearchingTech();
	local tech = GameInfo.Technologies[techType];
	if (tech ~= nil) then
		return tech.TechnologyType;
		end
	return "NO_TECH";
end</GetFunction>
      <SetFunction>function(value)
   -- Players[g_TunerSelectedPlayer]:PushResearch(value, 1);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>95</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Research Progress</Name>
      <GetFunction>function()
  if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetTechs() == nil then return 0; end
	return Players[g_TunerSelectedPlayer]:GetTechs():GetTurnsLeft();
end</GetFunction>
      <SetFunction>function(value)
  Players[g_TunerSelectedPlayer]:GetTechs():SetResearchProgress(value);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>129</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Gold</Name>
      <GetFunction>function()
   if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetTreasury() == nil then return -1; end
  return Players[g_TunerSelectedPlayer]:GetTreasury():GetGoldBalance();
end</GetFunction>
      <SetFunction>function(value)
   if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetTreasury() == nil then return -1; end
   Players[g_TunerSelectedPlayer]:GetTreasury():SetGoldBalance(value);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>28</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Culture Yield</Name>
      <GetFunction>function()
   if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetCulture() == nil then return -1; end
  return Players[g_TunerSelectedPlayer]:GetCulture():GetCultureYield();
end</GetFunction>
      <SetFunction>function(value)
   -- Players[g_TunerSelectedPlayer]:GetCulture():SetCultureTotal();
end</SetFunction>
      <Location>
        <X>650</X>
        <Y>25</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Random Seed</Name>
      <GetFunction>function()
	return Game.GetRandomSeed();
end</GetFunction>
      <SetFunction>function(value)
	Game.SetRandomSeed(value);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>374</Y>
      </Location>
      <DefaultValue>-1</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Score</Name>
      <GetFunction>function()
				if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil then return -1; end
				return Players[g_TunerSelectedPlayer]:GetScore();
end</GetFunction>
      <SetFunction>function(value)
end</SetFunction>
      <Location>
        <X>810</X>
        <Y>27</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Current Civic ID</Name>
      <GetFunction>function()
  if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetCulture() == nil then return "NO_CIVIC"; end
	local civicType = Players[g_TunerSelectedPlayer]:GetCulture():GetProgressingCivic();
	local civic = GameInfo.Civics[civicType];
	if (civic ~= nil) then
		return civic.CivicType;
		end
	return "NO_CIVIC";
end</GetFunction>
      <SetFunction>function(value)
   -- Players[g_TunerSelectedPlayer]:PushResearch(value, 1);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>410</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>Culture Progress</Name>
      <GetFunction>function()
  if Players == nil or g_TunerSelectedPlayer == nil or Players[g_TunerSelectedPlayer] == nil or Players[g_TunerSelectedPlayer]:GetTechs() == nil then return 0; end
	return Players[g_TunerSelectedPlayer]:GetCulture():GetTurnsLeftOnCurrentCivic();
end</GetFunction>
      <SetFunction>function(value)
  --Players[g_TunerSelectedPlayer]:GetCulture():SetResearchProgress(value);
end</SetFunction>
      <Location>
        <X>580</X>
        <Y>443</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
  </IntegerControls>
  <FloatControls />
  <BooleanControls />
  <TableViews />
  <DataViews />
  <StatTrackers />
  <SelectionLists>
    <SelectionListData>
      <Location>
        <X>10</X>
        <Y>23</Y>
      </Location>
      <Size>
        <Width>202</Width>
        <Height>462</Height>
      </Size>
      <Name>PlayerID:60;Player Name:60</Name>
      <PopulateList>function()

	if (g_TunerSelectedPlayer == nil) then
		g_TunerSelectedPlayer = 0;
	end

	local listItems = {};
	
 for playerID = 0, GameDefines.MAX_PLAYERS-1, 1 do
  local pPlayer = Players[playerID];
  if pPlayer and pPlayer:IsAlive() then
   local str = playerID..";"..Locale.Lookup(PlayerConfigurations[playerID]:GetCivilizationShortDescription(playerID));
   listItems[#listItems+1] = str;
  end
 end

 return listItems;
end</PopulateList>
      <OnSelection>function(selection)
   local selectedPlayerIDStr = string.match(selection, "%d+");
	  g_TunerSelectedPlayer = tonumber(selectedPlayerIDStr);
end</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
  </SelectionLists>
  <MultiselectLists>
    <MultiselectListData>
      <Location>
        <X>220</X>
        <Y>25</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>461</Height>
      </Size>
      <Name>Tech</Name>
      <PopulateList>function()
	local listItems = {};
	local player = Players[g_TunerSelectedPlayer];
	local playerTechs = player:GetTechs();
	local ID = 0;		

	if playerTechs == nil then return; end
	
	for tech in GameInfo.Technologies() do
		local item = {};
		item["Text"] = string.gsub( tech.TechnologyType, "TECH_", "" );
		if(playerTechs:HasTech(tech.Index)) then
			item["Selected"] = true;
		else
			item["Selected"] = false;
		end
		ID = ID + 1;

		listItems[ID] = item;
	end
	return listItems;
end</PopulateList>
      <OnSelected>function(selection)
	local player = Players[g_TunerSelectedPlayer];
	local playerTechs = player:GetTechs();
	local ID = 0;		
	
	if playerTechs == nil then return; end

	-- Searching by the type name, change back to the full text key and look for it.
	local techType = "TECH_" .. tostring(selection);

	local tech = GameInfo.Technologies[techType];
	if (tech ~= nil) then
		playerTechs:SetResearchProgress(tech.Index, playerTechs:GetResearchCost(tech.Index));
	end
end
</OnSelected>
      <OnDeselected>function(selection)
	local player = Players[g_TunerSelectedPlayer];
	local playerTechs = player:GetTechs();
	local ID = 0;		

	if playerTechs == nil then return; end
	
	-- Searching by the type name, change back to the full text key and look for it.
	local techType = "TECH_" .. tostring(selection);

	local tech = GameInfo.Technologies[techType];
	if (tech ~= nil) then
		playerTechs:SetTech(tech.Index, false);
	end
end</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>410</X>
        <Y>25</Y>
      </Location>
      <Size>
        <Width>162</Width>
        <Height>457</Height>
      </Size>
      <Name>Civics</Name>
      <PopulateList>function()
	local listItems = {};
	local player = Players[g_TunerSelectedPlayer];
	local playerCulture = player:GetCulture();
	local ID = 0;		
	
	if playerCulture == nil then return; end

	for civic in GameInfo.Civics() do
		local item = {};
		item["Text"] = string.gsub( civic.CivicType, "CIVIC_", "" );
		if(playerCulture:HasCivic(civic.Index)) then
			item["Selected"] = true;
		else
			item["Selected"] = false;
		end
		ID = ID + 1;

		listItems[ID] = item;
	end
	return listItems;
end
</PopulateList>
      <OnSelected>function(selection)
	local player = Players[g_TunerSelectedPlayer];
	local playerCulture = player:GetCulture();
	local ID = 0;		
	
	if playerCulture == nil then return; end

	-- Searching by the type name, change back to the full text key and look for it.
	local civicType = "CIVIC_" .. tostring(selection);

	local civic = GameInfo.Civics[civicType];
	if (civic ~= nil) then
		playerCulture:SetCulturalProgress(civic.Index, playerCulture:GetCultureCost(civic.Index));	
	end
end
</OnSelected>
      <OnDeselected>function(selection)
	local player = Players[g_TunerSelectedPlayer];
	local playerCulture = player:GetCulture();
	local ID = 0;		

	if playerCulture == nil then return; end
	
	-- Searching by the type name, change back to the full text key and look for it.
	local civicType = "CIVIC_" .. tostring(selection);

	local civic = GameInfo.Civics[civicType];
	if (civic ~= nil) then
		playerCulture:SetCivic(civic.Index, false);
	end
end
</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>920</X>
        <Y>31</Y>
      </Location>
      <Size>
        <Width>149</Width>
        <Height>207</Height>
      </Size>
      <Name>Era</Name>
      <PopulateList>function()
	local listItems = {};
	local player = Players[g_TunerSelectedPlayer];
	local playerEra = player:GetEras();
	local ID = 0;		

	if playerEra == nil then return; end
	
	for era in GameInfo.Eras() do
		local item = {};
		item["Text"] = string.gsub( era.EraType, "ERA_", "" );
		if(playerEra:GetEra() == era.Index) then
			item["Selected"] = true;
		else
			item["Selected"] = false;
		end
		ID = ID + 1;

		listItems[ID] = item;
	end
	return listItems;
end
</PopulateList>
      <OnSelected>function(selection)
	local player = Players[g_TunerSelectedPlayer];
	local playerEra = player:GetEras();
	local ID = 0;		

	if playerEra == nil then return; end
	
	-- Searching by the type name, change back to the full text key and look for it.
	local eraType = "ERA_" .. tostring(selection);

	local era = GameInfo.Eras[eraType];
	if (era ~= nil) then
		playerEra:SetEra(era.Index);
	end
end
</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
  </MultiselectLists>
</PanelData>