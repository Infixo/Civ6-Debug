<?xml version="1.0"?>
<PanelData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>xModifiers</Name>
  <App>Civ6</App>
  <EnterAction />
  <ExitAction />
  <CompatibleStates>
    <string>GameCore_Tuner</string>
    <string>InGame</string>
  </CompatibleStates>
  <LoadStates />
  <Actions>
    <ActionData>
      <Name>Show ALL</Name>
      <Action>g_ShowOnlyId = false;
g_ShowOwner = false;
g_TestG = "reset";</Action>
      <Location>
        <X>70</X>
        <Y>40</Y>
      </Location>
    </ActionData>
  </Actions>
  <StringControls>
    <StringControlData>
      <Name>Owner</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local owner = GameEffects.GetModifierOwner(g_ModifierId);
		if(owner ~= nil) then
			return GameEffects.GetObjectString(owner);
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>170</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Owner Requirements</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local definition = GameEffects.GetModifierDefinition(g_ModifierId);
		if(definition ~= nil) then
			return definition.OwnerRequirementSetId or "No Requirements";
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>108</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Subject Requirements</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local definition = GameEffects.GetModifierDefinition(g_ModifierId);
		if(definition ~= nil) then
			return definition.SubjectRequirementSetId or "No Requirements";
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>140</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Type</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local definition = GameEffects.GetModifierDefinition(g_ModifierId);
		if(definition ~= nil) then
			local typeInfo = GameInfo.Types[definition.Type];
			return typeInfo and typeInfo.Type or definition.Type;
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>38</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>RunOnce</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local definition = GameEffects.GetModifierDefinition(g_ModifierId);
		if(definition ~= nil) then
			return definition.IsRunOnce;
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>74</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Permanent</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local definition = GameEffects.GetModifierDefinition(g_ModifierId);
		if(definition ~= nil) then
			return definition.IsPermanent;
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>710</X>
        <Y>73</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Owner Name</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local owner = GameEffects.GetModifierOwner(g_ModifierId);
		if(owner ~= nil) then
			return Locale.Lookup(GameEffects.GetObjectName(owner));
		end
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>600</X>
        <Y>201</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Active</Name>
      <GetFunction>function()
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		return tostring(GameEffects.GetModifierActive(g_ModifierId));
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>830</X>
        <Y>73</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>TEST</Name>
      <GetFunction>function()
	return g_TestG;
end</GetFunction>
      <SetFunction />
      <Location>
        <X>380</X>
        <Y>41</Y>
      </Location>
    </StringControlData>
  </StringControls>
  <IntegerControls>
    <IntegerControlData>
      <Name>ModifierCount</Name>
      <GetFunction>function()
	if(GameEffects ~= nil) then
		return GameEffects.GetModifierCount();
	end	
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>-190</X>
        <Y>47</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
    <IntegerControlData>
      <Name>InstanceId</Name>
      <GetFunction>function()
	return g_ModifierId;
end</GetFunction>
      <SetFunction>function(value)
	g_ModifierId = value;
end</SetFunction>
      <Location>
        <X>460</X>
        <Y>41</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
  </IntegerControls>
  <FloatControls />
  <BooleanControls>
    <BooleanControlData>
      <Name>Show Modifier Id</Name>
      <GetFunction>function()
	return g_ShowOnlyId;
end</GetFunction>
      <SetFunction>function(value)
 if g_ShowOnlyId then
		g_ShowOnlyId = false;
	else
		g_ShowOnlyId = true;
	end
	g_TestG = tostring(g_ShowOnlyId);
end</SetFunction>
      <Location>
        <X>140</X>
        <Y>39</Y>
      </Location>
    </BooleanControlData>
    <BooleanControlData>
      <Name>Show Owner</Name>
      <GetFunction>function()
	return g_ShowOwner;
end</GetFunction>
      <SetFunction>function(value)
	if value then
		g_ShowOwner = true;
	else
		g_ShowOwner = false;
	end
 g_TestG = tostring(g_ShowOwner);
end</SetFunction>
      <Location>
        <X>270</X>
        <Y>39</Y>
      </Location>
    </BooleanControlData>
  </BooleanControls>
  <TableViews />
  <TreeViews />
  <DataViews />
  <StatTrackers />
  <SelectionLists>
    <SelectionListData>
      <Location>
        <X>10</X>
        <Y>72</Y>
      </Location>
      <Size>
        <Width>587</Width>
        <Height>763</Height>
      </Size>
      <Name>Inst:40;Modifier Id:280;Owner:120;# Subjects:40;Active:40;</Name>
      <PopulateList>function()
local modifiers = GameEffects.GetModifiers();
local table_data = {};
	
	local iModIndex = -1;
	local sFilterId = "";
	local sFilterOwner = "";
	for i,v in ipairs(modifiers) do
		if g_ModifierId == v then iModIndex = i; end
	end
	if iModIndex &gt; 0 then 
		sFilterId = tostring(GameEffects.GetModifierDefinition(g_ModifierId).Id);
		sFilterOwner = Locale.Lookup(GameEffects.GetObjectName(GameEffects.GetModifierOwner(g_ModifierId)) or "Unknown");
	else
		g_ShowOnlyId = false;
		g_ShowOwner = false;
	end
	
for i,v in ipairs(modifiers) do
	local definition = GameEffects.GetModifierDefinition(v);
	local owner = GameEffects.GetModifierOwner(v);
	local ownerName = Locale.Lookup(GameEffects.GetObjectName(owner) or "Unknown");
	local subjectCount = GameEffects.GetModifierSubjectCount(v);
	local trackedCount = GameEffects.GetModifierTrackedObjectCount(v);
	
	if (not g_ShowOwner or sFilterOwner == ownerName) and (not g_ShowOnlyId or sFilterId == tostring(definition.Id)) then
		local data = tostring(v) .. ";" .. tostring(definition.Id) .. ";" .. tostring(ownerName) .. ";" .. 	tostring(subjectCount) .. "/" .. tostring(trackedCount) .. ";" .. tostring(GameEffects.GetModifierActive(v));		
		table_data[i] = data;
	end
end
return table_data;
end
</PopulateList>
      <OnSelection>function(selection)
	local str1 = string.match(selection, "%d+");
	g_ModifierId = tonumber(str1);
end
</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
    <SelectionListData>
      <Location>
        <X>600</X>
        <Y>443</Y>
      </Location>
      <Size>
        <Width>522</Width>
        <Height>219</Height>
      </Size>
      <Name>Inst:60;Subjects:90;Type:60;Debug:170;Met:40</Name>
      <PopulateList>function()
	local listItems = {};
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local subjects = GameEffects.GetModifierSubjects(g_ModifierId) or {};
		local objects = GameEffects.GetModifierTrackedObjects(g_ModifierId) or {};
		
		local sortedItems = {};
		for i,v in ipairs(subjects) do
			local name = Locale.Lookup(GameEffects.GetObjectName(v) or "");
			local t = Locale.Lookup(GameEffects.GetObjectType(v) or "");
			local s = GameEffects.GetObjectString(v);
			sortedItems[v] = tostring(v) .. ";" .. tostring(name) .. ";" .. t .. ";" .. s .. ";Met;";
		end
		
		for i,v in ipairs(objects) do
			if(sortedItems[v] == nil) then
				local name = Locale.Lookup(GameEffects.GetObjectName(v) or "");
				local t = Locale.Lookup(GameEffects.GetObjectType(v) or "");
				local s = GameEffects.GetObjectString(v);
				sortedItems[v] = tostring(v) .. ";" .. tostring(name) .. ";" .. t .. ";" .. s .. ";Not Met;";
			end
		end
		
		for k,v in pairs(sortedItems) do
			table.insert(listItems, v);
		end
	end
	
	return listItems;
end</PopulateList>
      <OnSelection>function(selection)
	local str1 = string.match(selection, "%d+");
	g_SubjectId = tonumber(str1);
end
</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
    <SelectionListData>
      <Location>
        <X>600</X>
        <Y>339</Y>
      </Location>
      <Size>
        <Width>522</Width>
        <Height>101</Height>
      </Size>
      <Name>Inst:60;OwnerReqId:280;State:40</Name>
      <PopulateList>function()
	local items = {};
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
		local ownerRequirements = GameEffects.GetModifierOwnerRequirementSet(g_ModifierId);
		if(ownerRequirements ~= nil) then
			local requirements = GameEffects.GetRequirementSetInnerRequirements(ownerRequirements) or {};
			for i,v in ipairs(requirements) do
				local definition = GameEffects.GetRequirementDefinition(v);
				local state = GameEffects.GetRequirementState(v);
				table.insert(items, tostring(v) .. ";" .. tostring(definition.Id) .. ";" .. tostring(state));
			end
		end
	end
	
	return items;
end
</PopulateList>
      <OnSelection>function(selection)

end
</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
    <SelectionListData>
      <Location>
        <X>600</X>
        <Y>665</Y>
      </Location>
      <Size>
        <Width>520</Width>
        <Height>169</Height>
      </Size>
      <Name>Inst:60;SubjectReqId:280;State:40</Name>
      <PopulateList>function()
	local items = {};
	if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0 and g_SubjectId ~= nil and tonumber(g_SubjectId) ~= 0) then
		local requirementSet = GameEffects.GetModifierTrackedOjectRequirementSet(g_ModifierId, g_SubjectId);
		if(requirementSet ~= nil) then
			local requirements = GameEffects.GetRequirementSetInnerRequirements(requirementSet) or {};
			for i,v in ipairs(requirements) do
				local definition = GameEffects.GetRequirementDefinition(v);
				local state = GameEffects.GetRequirementState(v);
				table.insert(items, tostring(v) .. ";" .. tostring(definition.Id) .. ";" .. tostring(state));
			end
		end
	end
	
	return items;
end</PopulateList>
      <OnSelection>function(selection)

end
</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
    <SelectionListData>
      <Location>
        <X>780</X>
        <Y>202</Y>
      </Location>
      <Size>
        <Width>335</Width>
        <Height>120</Height>
      </Size>
      <Name>Name:90;Value:60</Name>
      <PopulateList>function()
  local listItems = {};
	
  if(g_ModifierId ~= nil and tonumber(g_ModifierId) ~= 0) then
    local definition = GameEffects.GetModifierDefinition(g_ModifierId);
    if(definition ~= nil) then
			  if definition.Arguments then
        for nam,val in pairs(definition.Arguments) do
						  table.insert(listItems,nam..";"..val);
        end
      else
				   table.insert(listItems,"No arguments");
      end
    end
  end

  return listItems;
end
</PopulateList>
      <OnSelection>function(selection)

end
</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
  </SelectionLists>
  <MultiselectLists />
</PanelData>